import com.enonic.test.server.ServerInstance

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
            jcenter()
        }
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
}

enonic {
    publishRepo = 'inhouse'
}

configurations {
    testPerformance
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://repo.enonic.com/public'
    }
}

ext {
    testName = 'performance'
    unpackDir = "$buildDir${File.separator}install"
    distroDir = "$unpackDir${File.separator}enonic-xp-generic-$xpVersion"
    deployDir = "$distroDir${File.separator}home${File.separator}deploy"
    xpHome = "$distroDir${File.separator}home"
//    configDir = "$xpHome${File.separator}config"
    appDir = "$projectDir${File.separator}test-applications"
    contentStudioFile = "$deployDir${File.separator}contentstudio-${csVersion}.jar"
    contentStudioAppUrl = "https://repo.enonic.com/public/com/enonic/app/contentstudio/${csVersion}/contentstudio-${csVersion}.jar"
    xpServer = new ServerInstance()
}

dependencies {
//    compile 'org.seleniumhq.selenium:selenium-java:3.12.0'
//    compile 'com.google.guava:guava:23.0'
//    compile "com.enonic.xp:core-api:$xpVersion"
//    compile 'log4j:log4j:1.2.17'
//    compile 'org.codehaus.groovy:groovy-all:2.4.15'
//    compile 'org.spockframework:spock-core:1.1-groovy-2.4'
//    compile 'org.gebish:geb-spock:2.1'
    testPerformance "com.enonic.xp:enonic-xp-generic:$xpVersion@zip"
}

task unpackDistro( type: Copy ) {
    from {
        configurations.testPerformance.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task deployContentStudio( type: DefaultTask ) {
    doLast {
        println 'Retrieving Content Studio App from:'
        println contentStudioAppUrl
        println 'Deploying to:'
        println contentStudioFile

        def f = new File( contentStudioFile )
        if ( !f.exists() )
        {
            new URL( contentStudioAppUrl ).withInputStream { i -> f.withOutputStream { it << i } }
            println 'Content Studio App is downloaded.'
        }
        else
        {
            println 'Content Studio App already exists.'
        }
    }
}

task startServer( dependsOn: [unpackDistro, deployContentStudio] ) {
    doLast {
        // logging.captureStandardOutput LogLevel.INFO
        // ext.xpServer = new ServerInstance()
        xpServer.installDir = file( distroDir )
        xpServer.startupDelay = 12000
        xpServer.start()
    }
    deployContentStudio.mustRunAfter unpackDistro
}

task copyApps( type: Copy ) {
    println 'Copying apps from:'
    println appDir
    println 'to:'
    println deployDir

    from file( appDir )
    include '*.jar'
    into file( deployDir )
}

task runServerDataInit( type: Exec ) {
    commandLine "k6", "run", "src/main/k6/server_data_init.js"
}

task runPerformanceTests( type: Exec, dependsOn: [startServer, copyApps, runServerDataInit] ) {
    copyApps.mustRunAfter( startServer )
    runServerDataInit.mustRunAfter( copyApps )
    commandLine "k6", "run", "src/main/k6/performance.js", "--out", "cloud"
}

runPerformanceTests.finalizedBy = ['stopServer']

task stopServer {
    doLast {
        xpServer.stop()
    }
}


task printProps {
    doLast {
        println xpVersion
        println csVersion
    }
}